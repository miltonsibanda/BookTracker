// Enhanced BookTracker App with Extended Features
class BookTracker {
    constructor() {
        this.books = [];
        this.filteredBooks = [];
        this.currentEditId = null;
        this.currentView = 'grid';
        this.publishers = new Set();
        this.init();
    }

    init() {
        this.loadBooksFromStorage();
        this.bindEvents();
        this.renderBooks();
        this.updateStats();
        this.updatePublisherFilter();
        this.setupInitialData();
    }

    // Setup initial data with enhanced fields
    setupInitialData() {
        if (this.books.length === 0) {
            const initialBooks = [
                {
                    id: this.generateId(),
                    title: "Blood and Steel",
                    author: "Unknown Author",
                    series: "",
                    bookNumber: null,
                    status: "read",
                    rating: 4,
                    pageCount: 350,
                    edition: "First Edition",
                    publisher: "Fantasy Press",
                    digitallySigned: false,
                    signed: false,
                    sprayedEdges: false,
                    hiddenCover: false,
                    reversibleDustJacket: false,
                    dateStarted: "2024-01-15",
                    dateFinished: "2024-01-28",
                    gifted: false,
                    notes: "Great fantasy novel with complex characters",
                    readingNotes: "Loved the world-building and magic system",
                    dateAdded: new Date().toISOString()
                },
                {
                    id: this.generateId(),
                    title: "The Cruel Prince",
                    author: "Holly Black",
                    series: "Folk of the Air",
                    bookNumber: 1,
                    status: "read",
                    rating: 5,
                    pageCount: 370,
                    edition: "Hardcover",
                    publisher: "Little, Brown Books",
                    digitallySigned: false,
                    signed: true,
                    sprayedEdges: true,
                    hiddenCover: true,
                    reversibleDustJacket: false,
                    dateStarted: "2024-02-01",
                    dateFinished: "2024-02-10",
                    gifted: true,
                    notes: "Amazing start to the series",
                    readingNotes: "The enemies-to-lovers trope done perfectly",
                    dateAdded: new Date().toISOString()
                },
                {
                    id: this.generateId(),
                    title: "Girl (The Plated Prisoner)",
                    author: "Raven Kennedy",
                    series: "Plated Prisoner",
                    bookNumber: 1,
                    status: "currently-reading",
                    rating: 0,
                    pageCount: 420,
                    edition: "Special Edition",
                    publisher: "Bloom Books",
                    digitallySigned: true,
                    signed: false,
                    sprayedEdges: true,
                    hiddenCover: false,
                    reversibleDustJacket: true,
                    dateStarted: "2024-03-01",
                    dateFinished: null,
                    gifted: false,
                    notes: "Currently reading this retelling",
                    readingNotes: "Interesting take on the Midas myth",
                    dateAdded: new Date().toISOString()
                }
            ];
            
            this.books = initialBooks;
            this.saveBooksToStorage();
            this.renderBooks();
            this.updateStats();
            this.updatePublisherFilter();
        }
    }

    // Enhanced event binding
    bindEvents() {
        // Modal controls
        document.getElementById('addBookBtn').addEventListener('click', () => this.openModal());
        document.getElementById('addFirstBook').addEventListener('click', () => this.openModal());
        document.getElementById('closeModal').addEventListener('click', () => this.closeModal());
        document.getElementById('cancelBtn').addEventListener('click', () => this.closeModal());
        document.getElementById('bookForm').addEventListener('submit', (e) => this.handleFormSubmit(e));

        // Delete modal
        document.getElementById('closeDeleteModal').addEventListener('click', () => this.closeDeleteModal());
        document.getElementById('cancelDeleteBtn').addEventListener('click', () => this.closeDeleteModal());
        document.getElementById('confirmDeleteBtn').addEventListener('click', () => this.confirmDelete());

        // Search and filters
        document.getElementById('searchInput').addEventListener('input', () => this.handleSearch());
        document.getElementById('clearSearch').addEventListener('click', () => this.clearSearch());
        document.getElementById('statusFilter').addEventListener('change', () => this.applyFilters());
        document.getElementById('publisherFilter').addEventListener('change', () => this.applyFilters());
        document.getElementById('sortBy').addEventListener('change', () => this.applySorting());

        // View toggle
        document.getElementById('gridView').addEventListener('click', () => this.toggleView('grid'));
        document.getElementById('listView').addEventListener('click', () => this.toggleView('list'));

        // Import/Export
        document.getElementById('importBtn').addEventListener('click', () => this.importBooks());
        document.getElementById('exportBtn').addEventListener('click', () => this.exportBooks());
        document.getElementById('fileInput').addEventListener('change', (e) => this.handleFileImport(e));

        // Form tabs
        document.querySelectorAll('.form-tab').forEach(tab => {
            tab.addEventListener('click', (e) => this.switchTab(e.target.dataset.tab));
        });

        // Reading status change handler
        document.getElementById('readingStatus').addEventListener('change', (e) => {
            this.handleStatusChange(e.target.value);
        });

        // Rating inputs
        this.setupRatingInputs();

        // Modal backdrop click
        document.querySelectorAll('.modal__backdrop').forEach(backdrop => {
            backdrop.addEventListener('click', (e) => {
                if (e.target === backdrop) {
                    this.closeModal();
                    this.closeDeleteModal();
                }
            });
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));
    }

    // Tab switching functionality
    switchTab(tabName) {
        // Update tab buttons
        document.querySelectorAll('.form-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

        // Update tab content
        document.querySelectorAll('.form-tab-content').forEach(content => {
            content.classList.remove('active');
        });
        document.getElementById(`${tabName}Tab`).classList.add('active');
    }

    // Handle reading status changes
    handleStatusChange(status) {
        const dateFinishedField = document.getElementById('dateFinished');
        const dateStartedField = document.getElementById('dateStarted');
        
        if (status === 'read' || status === 'dnf') {
            if (!dateFinishedField.value) {
                dateFinishedField.value = new Date().toISOString().split('T')[0];
            }
        }
        
        if (status === 'currently-reading' && !dateStartedField.value) {
            dateStartedField.value = new Date().toISOString().split('T')[0];
        }
    }

    // Generate unique ID
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    // Enhanced local storage operations
    saveBooksToStorage() {
        try {
            localStorage.setItem('bookTracker_books', JSON.stringify(this.books));
        } catch (error) {
            console.error('Error saving books to localStorage:', error);
        }
    }

    loadBooksFromStorage() {
        try {
            const stored = localStorage.getItem('bookTracker_books');
            if (stored) {
                this.books = JSON.parse(stored);
            }
        } catch (error) {
            console.error('Error loading books from localStorage:', error);
            this.books = [];
        }
    }

    // Enhanced modal operations
    openModal(book = null) {
        const modal = document.getElementById('bookModal');
        const form = document.getElementById('bookForm');
        const title = document.getElementById('modalTitle');

        if (book) {
            title.textContent = 'Edit Book';
            this.currentEditId = book.id;
            this.populateForm(book);
        } else {
            title.textContent = 'Add New Book';
            this.currentEditId = null;
            form.reset();
            this.resetRatings();
            // Switch to first tab
            this.switchTab('basic');
        }

        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
        
        setTimeout(() => {
            document.getElementById('bookTitle').focus();
        }, 200);
    }

    closeModal() {
        const modal = document.getElementById('bookModal');
        modal.classList.remove('active');
        document.body.style.overflow = '';
        this.currentEditId = null;
    }

    closeDeleteModal() {
        const modal = document.getElementById('deleteModal');
        modal.classList.remove('active');
        document.body.style.overflow = '';
    }

    // Enhanced form population
    populateForm(book) {
        // Basic info
        document.getElementById('bookTitle').value = book.title || '';
        document.getElementById('bookAuthor').value = book.author || '';
        document.getElementById('bookSeries').value = book.series || '';
        document.getElementById('bookNumber').value = book.bookNumber || '';
        document.getElementById('readingStatus').value = book.status || 'want-to-read';
        document.getElementById('bookNotes').value = book.notes || '';

        // Book details
        document.getElementById('pageCount').value = book.pageCount || '';
        document.getElementById('edition').value = book.edition || '';
        document.getElementById('publisher').value = book.publisher || '';
        document.getElementById('gifted').checked = book.gifted || false;

        // Physical features
        document.getElementById('digitallySigned').checked = book.digitallySigned || false;
        document.getElementById('signed').checked = book.signed || false;
        document.getElementById('sprayedEdges').checked = book.sprayedEdges || false;
        document.getElementById('hiddenCover').checked = book.hiddenCover || false;
        document.getElementById('reversibleDustJacket').checked = book.reversibleDustJacket || false;

        // Reading info
        document.getElementById('dateStarted').value = book.dateStarted || '';
        document.getElementById('dateFinished').value = book.dateFinished || '';
        document.getElementById('readingNotes').value = book.readingNotes || '';

        // Set rating
        this.setRating('rating', book.rating || 0);
    }

    // Enhanced form submission
    handleFormSubmit(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const bookData = {
            title: formData.get('title').trim(),
            author: formData.get('author').trim(),
            series: formData.get('series').trim(),
            bookNumber: formData.get('bookNumber') ? parseFloat(formData.get('bookNumber')) : null,
            status: formData.get('status'),
            rating: parseInt(document.getElementById('bookRating').value) || 0,
            notes: formData.get('notes').trim(),
            
            // Book details
            pageCount: formData.get('pageCount') ? parseInt(formData.get('pageCount')) : null,
            edition: formData.get('edition').trim(),
            publisher: formData.get('publisher').trim(),
            gifted: formData.has('gifted'),
            
            // Physical features
            digitallySigned: formData.has('digitallySigned'),
            signed: formData.has('signed'),
            sprayedEdges: formData.has('sprayedEdges'),
            hiddenCover: formData.has('hiddenCover'),
            reversibleDustJacket: formData.has('reversibleDustJacket'),
            
            // Reading info
            dateStarted: formData.get('dateStarted') || null,
            dateFinished: formData.get('dateFinished') || null,
            readingNotes: formData.get('readingNotes').trim()
        };

        // Validation
        if (!bookData.title || !bookData.author) {
            alert('Please fill in the required fields (Title and Author)');
            return;
        }

        if (this.currentEditId) {
            this.updateBook(this.currentEditId, bookData);
        } else {
            this.addBook(bookData);
        }

        this.closeModal();
    }

    // Enhanced book operations
    addBook(bookData) {
        const book = {
            ...bookData,
            id: this.generateId(),
            dateAdded: new Date().toISOString()
        };

        this.books.push(book);
        this.saveBooksToStorage();
        this.renderBooks();
        this.updateStats();
        this.updatePublisherFilter();
        this.showNotification('Book added successfully!', 'success');
    }

    updateBook(id, bookData) {
        const index = this.books.findIndex(book => book.id === id);
        if (index !== -1) {
            this.books[index] = {
                ...this.books[index],
                ...bookData,
                dateModified: new Date().toISOString()
            };
            this.saveBooksToStorage();
            this.renderBooks();
            this.updateStats();
            this.updatePublisherFilter();
            this.showNotification('Book updated successfully!', 'success');
        }
    }

    deleteBook(id) {
        const book = this.books.find(b => b.id === id);
        if (book) {
            document.getElementById('deleteBookTitle').textContent = book.title;
            const modal = document.getElementById('deleteModal');
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
            
            this.bookToDelete = id;
        }
    }

    confirmDelete() {
        if (this.bookToDelete) {
            this.books = this.books.filter(book => book.id !== this.bookToDelete);
            this.saveBooksToStorage();
            this.renderBooks();
            this.updateStats();
            this.updatePublisherFilter();
            this.showNotification('Book deleted successfully!', 'success');
            this.bookToDelete = null;
        }
        this.closeDeleteModal();
    }

    // Rating system (unchanged)
    setupRatingInputs() {
        const stars = document.querySelectorAll('#ratingStars .star');
        stars.forEach((star, index) => {
            star.addEventListener('click', () => this.setRating('rating', index + 1));
            star.addEventListener('mouseover', () => this.highlightRating('rating', index + 1));
            star.addEventListener('mouseout', () => this.resetRatingHighlight('rating'));
        });
    }

    setRating(type, value) {
        const container = type === 'rating' ? '#ratingStars' : '#loveHearts';
        const items = document.querySelectorAll(`${container} .star`);
        const hiddenInput = document.getElementById('bookRating');
        
        hiddenInput.value = value;
        
        items.forEach((item, index) => {
            if (index < value) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }

    highlightRating(type, value) {
        const container = type === 'rating' ? '#ratingStars' : '#loveHearts';
        const items = document.querySelectorAll(`${container} .star`);
        
        items.forEach((item, index) => {
            if (index < value) {
                item.style.opacity = '1';
            } else {
                item.style.opacity = '0.3';
            }
        });
    }

    resetRatingHighlight(type) {
        const container = type === 'rating' ? '#ratingStars' : '#loveHearts';
        const items = document.querySelectorAll(`${container} .star`);
        
        items.forEach(item => {
            item.style.opacity = '';
        });
    }

    resetRatings() {
        this.setRating('rating', 0);
    }

    // Enhanced rendering
    renderBooks() {
        const container = document.getElementById('booksContainer');
        const emptyState = document.getElementById('emptyState');
        
        this.applyFilters();
        this.applySorting();
        
        if (this.filteredBooks.length === 0) {
            container.innerHTML = '';
            emptyState.classList.remove('hidden');
            return;
        }

        emptyState.classList.add('hidden');
        
        container.innerHTML = this.filteredBooks.map(book => this.createBookCard(book)).join('');
        this.bindBookEvents();
    }

    // Enhanced book card creation
    createBookCard(book) {
        const statusClass = `book-card__status--${book.status}`;
        const statusIcon = this.getStatusIcon(book.status);
        const statusText = this.getStatusText(book.status);
        
        const physicalFeatures = this.getPhysicalFeatures(book);
        const specialEdition = this.isSpecialEdition(book);
        
        return `
            <div class="book-card" data-book-id="${book.id}">
                ${book.gifted ? '<div class="book-card__gifted"><i class="fas fa-gift"></i> Gift</div>' : ''}
                
                <div class="book-card__header">
                    <div>
                        <h3 class="book-card__title ${specialEdition ? 'book-card__special-edition' : ''}">${this.escapeHtml(book.title)}</h3>
                        <p class="book-card__author">by ${this.escapeHtml(book.author)}</p>
                    </div>
                    <div class="book-card__actions">
                        <button class="btn btn--icon" onclick="bookTracker.openModal(bookTracker.books.find(b => b.id === '${book.id}'))" title="Edit book">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn--icon" onclick="bookTracker.deleteBook('${book.id}')" title="Delete book">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                
                <div class="book-card__body">
                    ${book.series ? `
                        <div class="book-card__series">
                            <i class="fas fa-layer-group"></i>
                            ${this.escapeHtml(book.series)}${book.bookNumber ? ` #${book.bookNumber}` : ''}
                        </div>
                    ` : ''}
                    
                    ${book.publisher ? `
                        <div class="book-card__publisher">
                            <i class="fas fa-building"></i>
                            ${this.escapeHtml(book.publisher)}
                        </div>
                    ` : ''}
                    
                    <div class="book-card__meta">
                        ${book.pageCount ? `
                            <div class="book-card__meta-item">
                                <span class="book-card__meta-label">Pages</span>
                                <span class="book-card__meta-value">${book.pageCount}</span>
                            </div>
                        ` : ''}
                        
                        ${book.edition ? `
                            <div class="book-card__meta-item">
                                <span class="book-card__meta-label">Edition</span>
                                <span class="book-card__meta-value">${this.escapeHtml(book.edition)}</span>
                            </div>
                        ` : ''}
                    </div>
                    
                    ${physicalFeatures.length > 0 ? `
                        <div class="book-card__physical-features">
                            ${physicalFeatures.map(feature => `
                                <span class="book-card__feature ${feature.special ? 'book-card__feature--special' : ''}">
                                    <i class="${feature.icon}"></i>
                                    ${feature.name}
                                </span>
                            `).join('')}
                        </div>
                    ` : ''}
                    
                    ${(book.dateStarted || book.dateFinished) ? `
                        <div class="book-card__dates">
                            ${book.dateStarted ? `
                                <div class="book-card__date">
                                    <span class="book-card__date-label">Started</span>
                                    <span class="book-card__date-value">${this.formatDate(book.dateStarted)}</span>
                                </div>
                            ` : ''}
                            ${book.dateFinished ? `
                                <div class="book-card__date">
                                    <span class="book-card__date-label">Finished</span>
                                    <span class="book-card__date-value">${this.formatDate(book.dateFinished)}</span>
                                </div>
                            ` : ''}
                        </div>
                    ` : ''}
                    
                    ${book.readingNotes ? `
                        <div class="book-card__meta-item">
                            <span class="book-card__meta-label">Reading Notes</span>
                            <span class="book-card__meta-value">${this.escapeHtml(book.readingNotes)}</span>
                        </div>
                    ` : ''}
                </div>
                
                <div class="book-card__footer">
                    <div class="book-card__status ${statusClass}">
                        <i class="${statusIcon}"></i>
                        ${statusText}
                    </div>
                    
                    <div class="book-card__ratings">
                        ${book.rating > 0 ? `
                            <div class="rating-display">
                                <div class="stars">
                                    ${this.renderStars(book.rating)}
                                </div>
                            </div>
                        ` : ''}
                    </div>
                </div>
            </div>
        `;
    }

    // Helper methods for physical features
    getPhysicalFeatures(book) {
        const features = [];
        
        if (book.digitallySigned) features.push({ name: 'Digitally Signed', icon: 'fas fa-signature', special: true });
        if (book.signed) features.push({ name: 'Signed', icon: 'fas fa-pen-fancy', special: true });
        if (book.sprayedEdges) features.push({ name: 'Sprayed Edges', icon: 'fas fa-paint-brush', special: false });
        if (book.hiddenCover) features.push({ name: 'Hidden Cover', icon: 'fas fa-eye-slash', special: false });
        if (book.reversibleDustJacket) features.push({ name: 'Reversible Dust Jacket', icon: 'fas fa-sync-alt', special: false });
        
        return features;
    }

    isSpecialEdition(book) {
        return book.digitallySigned || book.signed || book.sprayedEdges || book.hiddenCover || book.reversibleDustJacket;
    }

    renderStars(rating) {
        let html = '';
        for (let i = 1; i <= 5; i++) {
            const className = i <= rating ? 'star' : 'star empty';
            html += `<i class="fas fa-star ${className}"></i>`;
        }
        return html;
    }

    formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
        });
    }

    bindBookEvents() {
        // Events are bound via onclick attributes for simplicity
    }

    // Enhanced search and filtering
    handleSearch() {
        this.renderBooks();
    }

    clearSearch() {
        document.getElementById('searchInput').value = '';
        this.renderBooks();
    }

    applyFilters() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const statusFilter = document.getElementById('statusFilter').value;
        const publisherFilter = document.getElementById('publisherFilter').value;

        this.filteredBooks = this.books.filter(book => {
            const matchesSearch = !searchTerm || 
                book.title.toLowerCase().includes(searchTerm) ||
                book.author.toLowerCase().includes(searchTerm) ||
                (book.series && book.series.toLowerCase().includes(searchTerm)) ||
                (book.notes && book.notes.toLowerCase().includes(searchTerm)) ||
                (book.publisher && book.publisher.toLowerCase().includes(searchTerm)) ||
                (book.edition && book.edition.toLowerCase().includes(searchTerm));

            const matchesStatus = !statusFilter || book.status === statusFilter;
            const matchesPublisher = !publisherFilter || book.publisher === publisherFilter;

            return matchesSearch && matchesStatus && matchesPublisher;
        });
    }

    applySorting() {
        const sortBy = document.getElementById('sortBy').value;
        
        this.filteredBooks.sort((a, b) => {
            switch (sortBy) {
                case 'title':
                    return a.title.localeCompare(b.title);
                case 'author':
                    return a.author.localeCompare(b.author);
                case 'series':
                    if (!a.series && !b.series) return 0;
                    if (!a.series) return 1;
                    if (!b.series) return -1;
                    const seriesCompare = a.series.localeCompare(b.series);
                    if (seriesCompare === 0) {
                        return (a.bookNumber || 0) - (b.bookNumber || 0);
                    }
                    return seriesCompare;
                case 'rating':
                    return (b.rating || 0) - (a.rating || 0);
                case 'publisher':
                    if (!a.publisher && !b.publisher) return 0;
                    if (!a.publisher) return 1;
                    if (!b.publisher) return -1;
                    return a.publisher.localeCompare(b.publisher);
                case 'dateStarted':
                    if (!a.dateStarted && !b.dateStarted) return 0;
                    if (!a.dateStarted) return 1;
                    if (!b.dateStarted) return -1;
                    return new Date(b.dateStarted) - new Date(a.dateStarted);
                case 'dateFinished':
                    if (!a.dateFinished && !b.dateFinished) return 0;
                    if (!a.dateFinished) return 1;
                    if (!b.dateFinished) return -1;
                    return new Date(b.dateFinished) - new Date(a.dateFinished);
                case 'dateAdded':
                    return new Date(b.dateAdded) - new Date(a.dateAdded);
                default:
                    return 0;
            }
        });
    }

    // View toggle (unchanged)
    toggleView(view) {
        this.currentView = view;
        const container = document.getElementById('booksContainer');
        const gridBtn = document.getElementById('gridView');
        const listBtn = document.getElementById('listView');

        if (view === 'grid') {
            container.classList.remove('list-view');
            gridBtn.classList.add('active');
            listBtn.classList.remove('active');
        } else {
            container.classList.add('list-view');
            listBtn.classList.add('active');
            gridBtn.classList.remove('active');
        }

        localStorage.setItem('bookTracker_view', view);
    }

    // Enhanced statistics
    updateStats() {
        const total = this.books.length;
        const read = this.books.filter(book => book.status === 'read').length;
        const currentlyReading = this.books.filter(book => book.status === 'currently-reading').length;
        const dnf = this.books.filter(book => book.status === 'dnf').length;
        const wantToRead = this.books.filter(book => book.status === 'want-to-read').length;

        document.getElementById('totalBooks').textContent = total;
        document.getElementById('readBooks').textContent = read;
        document.getElementById('currentlyReading').textContent = currentlyReading;
        document.getElementById('dnfBooks').textContent = dnf;
        document.getElementById('wantToRead').textContent = wantToRead;
    }

    // Update publisher filter
    updatePublisherFilter() {
        this.publishers.clear();
        this.books.forEach(book => {
            if (book.publisher) {
                this.publishers.add(book.publisher);
            }
        });

        const publisherFilter = document.getElementById('publisherFilter');
        const currentValue = publisherFilter.value;
        
        // Clear existing options except "All Publishers"
        publisherFilter.innerHTML = '<option value="">All Publishers</option>';
        
        // Add publisher options
        Array.from(this.publishers).sort().forEach(publisher => {
            const option = document.createElement('option');
            option.value = publisher;
            option.textContent = publisher;
            publisherFilter.appendChild(option);
        });
        
        // Restore previous selection if it still exists
        if (currentValue && this.publishers.has(currentValue)) {
            publisherFilter.value = currentValue;
        }
    }

    // Import/Export functionality (enhanced to handle new fields)
    exportBooks() {
        try {
            const dataStr = JSON.stringify(this.books, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `my-books-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            this.showNotification('Books exported successfully!', 'success');
        } catch (error) {
            console.error('Export error:', error);
            this.showNotification('Error exporting books', 'error');
        }
    }

    importBooks() {
        document.getElementById('fileInput').click();
    }

    handleFileImport(e) {
        const file = e.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (event) => {
            try {
                const importedBooks = JSON.parse(event.target.result);
                
                if (!Array.isArray(importedBooks)) {
                    throw new Error('Invalid file format');
                }

                const newBooks = importedBooks.map(book => ({
                    ...book,
                    id: this.generateId(),
                    dateAdded: book.dateAdded || new Date().toISOString()
                }));

                this.books = [...this.books, ...newBooks];
                this.saveBooksToStorage();
                this.renderBooks();
                this.updateStats();
                this.updatePublisherFilter();
                
                this.showNotification(`Successfully imported ${newBooks.length} books!`, 'success');
            } catch (error) {
                console.error('Import error:', error);
                this.showNotification('Error importing books. Please check the file format.', 'error');
            }
        };

        reader.readAsText(file);
        e.target.value = '';
    }

    // Enhanced utility functions
    getStatusIcon(status) {
        switch (status) {
            case 'want-to-read':
                return 'fas fa-bookmark';
            case 'currently-reading':
                return 'fas fa-book-open';
            case 'read':
                return 'fas fa-check';
            case 'dnf':
                return 'fas fa-times';
            default:
                return 'fas fa-book';
        }
    }

    getStatusText(status) {
        switch (status) {
            case 'want-to-read':
                return 'Want to Read';
            case 'currently-reading':
                return 'Reading';
            case 'read':
                return 'Read';
            case 'dnf':
                return 'DNF';
            default:
                return 'Unknown';
        }
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;
        notification.innerHTML = `
            <div class="notification__content">
                <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : 'info'}"></i>
                <span>${message}</span>
            </div>
        `;

        if (!document.querySelector('#notification-styles')) {
            const styles = document.createElement('style');
            styles.id = 'notification-styles';
            styles.textContent = `
                .notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 1001;
                    background: var(--bg-card);
                    border-radius: var(--radius-lg);
                    box-shadow: var(--shadow-lg);
                    padding: var(--spacing-4);
                    max-width: 300px;
                    transform: translateX(100%);
                    transition: transform 0.3s ease-in-out;
                }
                
                .notification.show {
                    transform: translateX(0);
                }
                
                .notification--success {
                    border-left: 4px solid var(--success-color);
                }
                
                .notification--error {
                    border-left: 4px solid var(--danger-color);
                }
                
                .notification--info {
                    border-left: 4px solid var(--primary-color);
                }
                
                .notification__content {
                    display: flex;
                    align-items: center;
                    gap: var(--spacing-2);
                    font-size: var(--font-size-sm);
                }
                
                .notification__content i {
                    color: ${type === 'success' ? 'var(--success-color)' : type === 'error' ? 'var(--danger-color)' : 'var(--primary-color)'};
                }
            `;
            document.head.appendChild(styles);
        }

        document.body.appendChild(notification);

        setTimeout(() => notification.classList.add('show'), 100);

        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    handleKeyboardShortcuts(e) {
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            document.getElementById('searchInput').focus();
        }
        
        if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
            e.preventDefault();
            this.openModal();
        }
        
        if (e.key === 'Escape') {
            this.closeModal();
            this.closeDeleteModal();
        }
    }
}

// Initialize the enhanced app
document.addEventListener('DOMContentLoaded', () => {
    window.bookTracker = new BookTracker();
});
