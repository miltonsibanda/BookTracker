# BookTracker Docker Makefile - Cross-Device Persistence
# Automatically detects docker-compose availability and provides alternatives

.PHONY: help build run stop clean logs shell dev prod test status restart network-info check-docker

# Check if docker-compose is available
HAS_DOCKER_COMPOSE := $(shell command -v docker-compose 2>/dev/null)
HAS_DOCKER := $(shell command -v docker 2>/dev/null)

# Default target
help: check-docker
	@echo "📚 BookTracker Docker Commands (Cross-Device Persistence):"
	@echo ""
	@echo "  build         - Build the Docker images with SQLite database"
	@echo "  run           - Run the application with persistent database storage"
	@echo "  dev           - Run in development mode"
	@echo "  prod          - Run in production mode"
	@echo "  stop          - Stop all running containers"
	@echo "  clean         - Stop and remove containers and images"
	@echo "  logs          - View container logs"
	@echo "  logs-api      - View API server logs only"
	@echo "  logs-app      - View frontend app logs only"
	@echo "  shell         - Open a shell in the frontend container"
	@echo "  shell-api     - Open a shell in the API container"
	@echo "  test          - Test the application health"
	@echo "  status        - Show container and volume status"
	@echo "  network-info  - Show network access information"
	@echo "  backup        - Create database backup"
	@echo "  restart       - Restart all services"
	@echo "  install-compose - Install docker-compose (if missing)"
	@echo ""
	@echo "🌐 Cross-Device Access:"
	@echo "  After running 'make run' or 'make dev', access from any device on your network!"
	@echo ""

# Check Docker availability and provide guidance
check-docker:
ifndef HAS_DOCKER
	@echo "❌ Docker is not installed or not available in PATH"
	@echo ""
	@echo "Please install Docker first:"
	@echo "  macOS: Download from https://docs.docker.com/desktop/install/mac/"
	@echo "  Linux: sudo apt-get install docker.io (Ubuntu/Debian)"
	@echo "         sudo yum install docker (RHEL/CentOS)"
	@echo ""
	@exit 1
endif
ifndef HAS_DOCKER_COMPOSE
	@echo "⚠️  docker-compose not found - using standalone Docker commands"
	@echo ""
	@echo "💡 To install docker-compose:"
	@echo "   make install-compose"
	@echo ""
	@echo "Or continue with standalone Docker (works the same way!)"
	@echo ""
endif

# Install docker-compose
install-compose:
	@echo "🔧 Installing docker-compose..."
ifdef HAS_DOCKER_COMPOSE
	@echo "✅ docker-compose is already installed"
else
	@echo "Installing docker-compose for your system..."
	@if [ "$$(uname)" = "Darwin" ]; then \
		echo "Installing via Homebrew..."; \
		brew install docker-compose || { \
			echo "Homebrew not found. Please install Docker Desktop which includes docker-compose:"; \
			echo "https://docs.docker.com/desktop/install/mac/"; \
		}; \
	elif [ "$$(uname)" = "Linux" ]; then \
		echo "Installing docker-compose..."; \
		sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$$(uname -s)-$$(uname -m)" -o /usr/local/bin/docker-compose && \
		sudo chmod +x /usr/local/bin/docker-compose || { \
			echo "Failed to install. Try: sudo apt-get install docker-compose"; \
		}; \
	else \
		echo "Please install docker-compose manually for your system"; \
		echo "See: https://docs.docker.com/compose/install/"; \
	fi
	@echo "✅ docker-compose installation complete"
endif

# Build the Docker images
build: check-docker
	@echo "🔨 Building BookTracker Docker images with SQLite database..."
ifdef HAS_DOCKER_COMPOSE
	docker-compose build
else
	@echo "Building API image..."
	docker build -t booktracker-api:latest ./backend
	@echo "Building frontend image..."
	docker build -t booktracker-frontend:latest .
endif
	@echo "✅ Build complete!"

# Setup for standalone Docker
setup-standalone:
	@echo "🔧 Setting up Docker network and volume..."
	docker network create booktracker-network 2>/dev/null || true
	docker volume create booktracker-data 2>/dev/null || true
	@echo "✅ Setup complete!"

# Run with Docker Compose or standalone
run: check-docker
ifdef HAS_DOCKER_COMPOSE
	@echo "🚀 Starting BookTracker with docker-compose..."
	$(MAKE) build
	docker-compose up -d
else
	@echo "🚀 Starting BookTracker with standalone Docker..."
	$(MAKE) setup-standalone
	$(MAKE) build
	
	@echo "Starting API container..."
	docker run -d \
		--name booktracker-api \
		--network booktracker-network \
		-p 3001:3001 \
		-v booktracker-data:/app/data \
		-e NODE_ENV=production \
		booktracker-api:latest
	
	@echo "Waiting for API to be ready..."
	@sleep 3
	
	@echo "Starting frontend container..."
	docker run -d \
		--name booktracker-frontend \
		--network booktracker-network \
		-p 8081:80 \
		booktracker-frontend:latest
endif
	@echo "✅ BookTracker is running!"
	@echo ""
	@$(MAKE) network-info

# Run in development mode (same as run for now)
dev: run

# Run in production mode
prod: check-docker
ifdef HAS_DOCKER_COMPOSE
	@echo "🏭 Starting BookTracker in production mode..."
	docker-compose -f docker-compose.prod.yml up -d 2>/dev/null || docker-compose up -d
else
	@echo "🏭 Starting BookTracker in production mode (standalone Docker)..."
	$(MAKE) run
endif
	@echo "✅ BookTracker production instance is running"
	@$(MAKE) network-info

# Stop all containers
stop: check-docker
	@echo "⏹️ Stopping BookTracker containers..."
ifdef HAS_DOCKER_COMPOSE
	docker-compose down 2>/dev/null || true
else
	docker stop booktracker-frontend booktracker-api 2>/dev/null || true
	docker rm booktracker-frontend booktracker-api 2>/dev/null || true
endif
	@echo "✅ Containers stopped (data preserved in volumes)"

# Clean up everything except volumes
clean: stop
	@echo "🧹 Cleaning up Docker resources..."
ifdef HAS_DOCKER_COMPOSE
	docker-compose down --rmi local 2>/dev/null || true
else
	docker rmi booktracker-api:latest booktracker-frontend:latest 2>/dev/null || true
	docker network rm booktracker-network 2>/dev/null || true
endif
	docker system prune -f
	@echo "✅ Cleanup complete (data volumes preserved)"

# DANGER: Remove everything including data
deep-clean:
	@echo "⚠️  WARNING: This will DELETE ALL DATA including your book collection!"
	@echo "Press Ctrl+C to cancel, or wait 10 seconds to continue..."
	@sleep 10
	@echo "🗑️  Removing everything including data volumes..."
ifdef HAS_DOCKER_COMPOSE
	docker-compose down -v --rmi all 2>/dev/null || true
else
	docker stop booktracker-frontend booktracker-api 2>/dev/null || true
	docker rm booktracker-frontend booktracker-api 2>/dev/null || true
	docker rmi booktracker-api:latest booktracker-frontend:latest 2>/dev/null || true
	docker volume rm booktracker-data 2>/dev/null || true
	docker network rm booktracker-network 2>/dev/null || true
endif
	docker system prune -af
	@echo "💥 Everything removed including all data!"

# View logs
logs: check-docker
ifdef HAS_DOCKER_COMPOSE
	@echo "📋 Viewing BookTracker logs..."
	docker-compose logs -f
else
	@echo "📋 Viewing BookTracker logs..."
	@echo "=== API Logs ==="
	docker logs booktracker-api --tail 50
	@echo ""
	@echo "=== Frontend Logs ==="
	docker logs booktracker-frontend --tail 50
endif

# View API logs only
logs-api: check-docker
ifdef HAS_DOCKER_COMPOSE
	@echo "📋 Viewing BookTracker API logs..."
	docker-compose logs -f booktracker-api
else
	@echo "📋 Viewing BookTracker API logs..."
	docker logs -f booktracker-api
endif

# View app logs only  
logs-app: check-docker
ifdef HAS_DOCKER_COMPOSE
	@echo "📋 Viewing BookTracker app logs..."
	docker-compose logs -f booktracker
else
	@echo "📋 Viewing BookTracker frontend logs..."
	docker logs -f booktracker-frontend
endif

# Open shell in frontend container
shell: check-docker
ifdef HAS_DOCKER_COMPOSE
	@echo "🐚 Opening shell in BookTracker frontend container..."
	docker-compose exec booktracker sh
else
	@echo "🐚 Opening shell in BookTracker frontend container..."
	docker exec -it booktracker-frontend sh
endif

# Open shell in API container
shell-api: check-docker
ifdef HAS_DOCKER_COMPOSE
	@echo "🐚 Opening shell in BookTracker API container..."
	docker-compose exec booktracker-api sh
else
	@echo "🐚 Opening shell in BookTracker API container..."
	docker exec -it booktracker-api sh
endif

# Test the application
test:
	@echo "🧪 Testing BookTracker application..."
	@echo ""
	@echo "Testing frontend..."
	@if curl -s -o /dev/null -w "%{http_code}" http://localhost:8081 | grep -q "200"; then \
		echo "✅ Frontend is responding correctly"; \
	else \
		echo "❌ Frontend test failed"; \
	fi
	@echo ""
	@echo "Testing API..."
	@if curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/api/health | grep -q "200"; then \
		echo "✅ API is responding correctly"; \
		echo "📊 API Health:"; \
		curl -s http://localhost:3001/api/health | python3 -m json.tool 2>/dev/null || curl -s http://localhost:3001/api/health; \
	else \
		echo "❌ API test failed"; \
	fi

# Show container status
status: check-docker
	@echo "📊 BookTracker Status:"
	@echo ""
	@echo "🐳 Containers:"
ifdef HAS_DOCKER_COMPOSE
	@docker-compose ps 2>/dev/null || echo "No containers running"
else
	@docker ps --filter "name=booktracker" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "No containers running"
endif
	@echo ""
	@echo "💾 Volumes:"
	@docker volume ls | grep booktracker || echo "No BookTracker volumes found"
	@echo ""
	@echo "📊 Volume Details:"
ifdef HAS_DOCKER_COMPOSE
	@docker volume inspect bookwebsite_booktracker-data 2>/dev/null | jq '.[0] | {Name, Mountpoint, CreatedAt}' 2>/dev/null || echo "Data volume not found"
else
	@docker volume inspect booktracker-data 2>/dev/null | python3 -c "import sys, json; data=json.load(sys.stdin); print(json.dumps({k: data[0][k] for k in ['Name', 'Mountpoint', 'CreatedAt']}, indent=2))" 2>/dev/null || echo "Data volume not found"
endif

# Show network access information
network-info:
	@echo "🌐 BookTracker Network Access Information:"
	@echo ""
	@echo "📱 Access from this computer:"
	@echo "   Frontend: http://localhost:8081"
	@echo "   API:      http://localhost:3001"
	@echo ""
	@echo "🌍 Access from other devices on your network:"
	@for ip in $$(hostname -I 2>/dev/null | tr ' ' '\n' | head -3) $$(ifconfig 2>/dev/null | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $$2}' | head -3); do \
		if [ "$$ip" != "" ]; then \
			echo "   Frontend: http://$$ip:8081"; \
			echo "   API:      http://$$ip:3001"; \
		fi; \
	done
	@echo ""
	@echo "💡 Tip: Use the frontend URL on other devices to access your book collection!"

# Create database backup
backup: check-docker
	@echo "💾 Creating database backup..."
ifdef HAS_DOCKER_COMPOSE
	@docker-compose exec booktracker-api curl -X POST http://localhost:3001/api/backup
else
	@docker exec booktracker-api curl -X POST http://localhost:3001/api/backup
endif
	@echo "✅ Backup created"

# Quick restart
restart: stop run

# Initialize database (force)
init-db: check-docker
	@echo "🗄️ Initializing database..."
ifdef HAS_DOCKER_COMPOSE
	@docker-compose exec booktracker-api node scripts/init-db.js 2>/dev/null || echo "Database initialization not needed"
else
	@docker exec booktracker-api node scripts/init-db.js 2>/dev/null || echo "Database initialization not needed"
endif
	@echo "✅ Database initialized"

# Show help for cross-device setup
cross-device-help:
	@echo "🌐 Setting Up Cross-Device Access:"
	@echo ""
	@echo "1. Start BookTracker:"
	@echo "   make run"
	@echo ""
	@echo "2. Find your network IP:"
	@echo "   make network-info"
	@echo ""
	@echo "3. On other devices, open a browser and go to:"
	@echo "   http://YOUR_IP:8081"
	@echo ""
	@echo "4. Add books on any device - they'll sync across all devices!"
	@echo ""
	@echo "🔧 Troubleshooting:"
	@echo "   - Make sure devices are on the same network"
	@echo "   - Check firewall settings allow port 8081 and 3001"
	@echo "   - Use 'make test' to verify everything is working"
	@echo ""
	@echo "🛠️ Alternative methods:"
	@echo "   - If docker-compose is missing: make install-compose"
	@echo "   - Standalone Docker commands work automatically"
